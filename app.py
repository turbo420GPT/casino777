import streamlit as st
import aiosqlite
import asyncio
import json
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import hashlib
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ö–∞–∑–∏–Ω–æ Telegram",
    page_icon="üé∞",
    layout="wide"
)

# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect("casino.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT UNIQUE NOT NULL,
                password TEXT NOT NULL,
                balance INTEGER DEFAULT 1000,
                first_name TEXT,
                last_name TEXT,
                telegram_username TEXT
            )
        """)
        await db.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
asyncio.run(init_db())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'user_data' not in st.session_state:
    st.session_state.user_data = None
if 'is_logged_in' not in st.session_state:
    st.session_state.is_logged_in = False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
def verify_password(password, hashed_password):
    return hash_password(password) == hashed_password

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def register_user(username, password, first_name=None, last_name=None, telegram_username=None):
    async with aiosqlite.connect("casino.db") as db:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π user_id
            async with db.execute("SELECT MAX(user_id) FROM users") as cursor:
                max_id = await cursor.fetchone()
                new_user_id = (max_id[0] or 0) + 1
            
            hashed_password = hash_password(password)
            await db.execute("""
                INSERT INTO users (user_id, username, password, first_name, last_name, telegram_username)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (new_user_id, username, hashed_password, first_name, last_name, telegram_username))
            await db.commit()
            return True
        except aiosqlite.IntegrityError:
            return False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
            return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def authenticate_user(username, password):
    async with aiosqlite.connect("casino.db") as db:
        async with db.execute("SELECT * FROM users WHERE username = ?", (username,)) as cursor:
            user = await cursor.fetchone()
            if user and verify_password(password, user['password']):
                return user
            return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_balance(user_id):
    async with aiosqlite.connect("casino.db") as db:
        async with db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)) as cursor:
            result = await cursor.fetchone()
            return result[0] if result else 1000

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async def update_balance(user_id, amount):
    async with aiosqlite.connect("casino.db") as db:
        await db.execute("""
            UPDATE users SET balance = balance + ? WHERE user_id = ?
        """, (amount, user_id))
        await db.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /miniapp
async def miniapp_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    miniapp_url = f"https://your-domain.com/miniapp?user_id={user_id}"
    await update.message.reply_text(
        f"üé∞ –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∑–∏–Ω–æ:\n{miniapp_url}",
        reply_markup={
            "inline_keyboard": [[{
                "text": "–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                "web_app": {"url": miniapp_url}
            }]]
        }
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_bot():
    async def bot_main():
        application = Application.builder().token(os.getenv("BOT_TOKEN")).build()
        application.add_handler(CommandHandler("miniapp", miniapp_command))
        await application.initialize()
        await application.start()
        await application.run_polling()
    
    asyncio.run(bot_main())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
if not hasattr(st.session_state, 'bot_thread'):
    st.session_state.bot_thread = threading.Thread(target=run_bot, daemon=True)
    st.session_state.bot_thread.start()

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    st.title("üé∞ –ö–∞–∑–∏–Ω–æ Telegram")
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if not st.session_state.is_logged_in:
        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        col1, col2 = st.columns(2)
        
        with col1:
            st.header("–í—Ö–æ–¥")
            with st.form("login_form"):
                login_username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                login_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
                login_submitted = st.form_submit_button("–í–æ–π—Ç–∏")
                
                if login_submitted:
                    user = asyncio.run(authenticate_user(login_username, login_password))
                    if user:
                        st.session_state.user_data = {
                            'id': user['user_id'],
                            'username': user['username'],
                            'first_name': user['first_name'],
                            'last_name': user['last_name']
                        }
                        st.session_state.is_logged_in = True
                        st.success("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
                        st.rerun()
                    else:
                        st.error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        
        with col2:
            st.header("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
            with st.form("register_form"):
                reg_username = st.text_input("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                reg_password = st.text_input("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
                confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
                reg_first_name = st.text_input("–ò–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
                reg_last_name = st.text_input("–§–∞–º–∏–ª–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
                reg_submitted = st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
                
                if reg_submitted:
                    if reg_password != confirm_password:
                        st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                    elif len(reg_username) < 3:
                        st.error("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
                    elif len(reg_password) < 6:
                        st.error("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
                    else:
                        if asyncio.run(register_user(reg_username, reg_password, reg_first_name, reg_last_name)):
                            st.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.")
                        else:
                            st.error("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞–∑–∏–Ω–æ
    else:
        user_id = st.session_state.user_data['id']
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        if st.button("–í—ã–π—Ç–∏"):
            st.session_state.is_logged_in = False
            st.session_state.user_data = None
            st.rerun()
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance = asyncio.run(get_user_balance(user_id))
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        col1, col2 = st.columns([1, 3])
        with col1:
            st.image("default_avatar.png", width=150)
        with col2:
            st.header(f"üë§ {st.session_state.user_data['username']}")
            st.subheader(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∏–≥—Ä
        col1, col2 = st.columns(2)
        
        with col1:
            st.header("üé∞ –°–ª–æ—Ç—ã")
            bet = st.number_input("–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:", min_value=1, max_value=balance, value=1)
            
            if st.button("–ö—Ä—É—Ç–∏—Ç—å"):
                win = bet * 2  # –ü—Ä–∏–º–µ—Ä –≤—ã–∏–≥—Ä—ã—à–∞
                asyncio.run(update_balance(user_id, win))
                st.success(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} –º–æ–Ω–µ—Ç!")
                st.balloons()
        
        with col2:
            st.header("üé≤ –î—Ä—É–≥–∏–µ –∏–≥—Ä—ã")
            st.info("–°–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∏–≥—Ä—ã!")

# –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
st.markdown("""
<style>
    .stApp {
        background-color: #2E2E2E;
        color: #FFFFFF;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 16px;
    }
    .stNumberInput>div>div>input {
        background-color: #3E3E3E;
        color: #FFFFFF;
    }
    .stTextInput>div>div>input {
        background-color: #3E3E3E;
        color: #FFFFFF;
    }
    .stForm {
        background-color: #3E3E3E;
        padding: 20px;
        border-radius: 10px;
        color: #FFFFFF;
    }
    h1, h2, h3 {
        color: #4CAF50;
    }
    .stTextInput>div>div>label {
        color: #FFFFFF;
    }
    .stNumberInput>div>div>label {
        color: #FFFFFF;
    }
    .stMarkdown {
        color: #FFFFFF;
    }
    .stAlert {
        background-color: #3E3E3E;
        color: #FFFFFF;
    }
    .stSuccess {
        background-color: #2E7D32;
        color: #FFFFFF;
    }
    .stError {
        background-color: #C62828;
        color: #FFFFFF;
    }
    .stInfo {
        background-color: #1565C0;
        color: #FFFFFF;
    }
</style>
""", unsafe_allow_html=True)

if __name__ == "__main__":
    main() 