import streamlit as st
import aiosqlite
import asyncio
import json
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import hashlib
import threading
import sqlite3
import random
import time
from PIL import Image
import requests
from io import BytesIO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ö–∞–∑–∏–Ω–æ Telegram",
    page_icon="üé∞",
    layout="wide"
)

# –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    try:
        async with aiosqlite.connect("casino.db") as db:
            await db.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT UNIQUE NOT NULL,
                    password TEXT NOT NULL,
                    balance INTEGER DEFAULT 1000,
                    first_name TEXT,
                    last_name TEXT,
                    telegram_username TEXT
                )
            """)
            await db.commit()
            print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
try:
    asyncio.run(init_db())
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
if 'user_data' not in st.session_state:
    st.session_state.user_data = None
if 'is_logged_in' not in st.session_state:
    st.session_state.is_logged_in = False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
def save_session_state():
    if st.session_state.is_logged_in and st.session_state.user_data:
        with open('session.json', 'w') as f:
            json.dump({
                'is_logged_in': st.session_state.is_logged_in,
                'user_data': st.session_state.user_data
            }, f)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
def load_session_state():
    try:
        with open('session.json', 'r') as f:
            data = json.load(f)
            st.session_state.is_logged_in = data['is_logged_in']
            st.session_state.user_data = data['user_data']
    except (FileNotFoundError, json.JSONDecodeError):
        pass

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_session_state()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
def verify_password(password, hashed_password):
    return hash_password(password) == hashed_password

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def register_user(username, password, first_name=None, last_name=None, telegram_username=None):
    try:
        print(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
        async with aiosqlite.connect("casino.db") as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            async with db.execute("SELECT username FROM users WHERE username = ?", (username,)) as cursor:
                existing_user = await cursor.fetchone()
                if existing_user:
                    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return False
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π user_id
            async with db.execute("SELECT MAX(user_id) FROM users") as cursor:
                max_id = await cursor.fetchone()
                new_user_id = (max_id[0] or 0) + 1
                print(f"–ù–æ–≤—ã–π user_id: {new_user_id}")
            
            hashed_password = hash_password(password)
            await db.execute("""
                INSERT INTO users (user_id, username, password, first_name, last_name, telegram_username)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (new_user_id, username, hashed_password, first_name, last_name, telegram_username))
            await db.commit()
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def authenticate_user(username, password):
    try:
        print(f"–ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
        async with aiosqlite.connect("casino.db") as db:
            db.row_factory = sqlite3.Row
            cursor = await db.execute("SELECT * FROM users WHERE username = ?", (username,))
            user = await cursor.fetchone()
            await cursor.close()
            
            if user:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                user_dict = {
                    'user_id': user['user_id'],
                    'username': user['username'],
                    'password': user['password'],
                    'balance': user['balance'],
                    'first_name': user['first_name'],
                    'last_name': user['last_name'],
                    'telegram_username': user['telegram_username']
                }
                if verify_password(password, user_dict['password']):
                    print(f"–ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –≤–µ—Ä–Ω—ã–π")
                    return user_dict
                else:
                    print(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
            else:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_balance(user_id):
    async with aiosqlite.connect("casino.db") as db:
        async with db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)) as cursor:
            result = await cursor.fetchone()
            return result[0] if result else 1000

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async def update_balance(user_id, amount):
    async with aiosqlite.connect("casino.db") as db:
        await db.execute("""
            UPDATE users SET balance = balance + ? WHERE user_id = ?
        """, (amount, user_id))
        await db.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤
async def get_top_players():
    async with aiosqlite.connect("casino.db") as db:
        async with db.execute("SELECT * FROM users ORDER BY balance DESC LIMIT 10") as cursor:
            return await cursor.fetchall()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
async def transfer_money(from_user_id, to_user_id, amount):
    async with aiosqlite.connect("casino.db") as db:
        try:
            await db.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (amount, from_user_id))
            await db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, to_user_id))
            await db.commit()
            return True
        except:
            await db.rollback()
            return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /miniapp
async def miniapp_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    miniapp_url = f"https://your-domain.com/miniapp?user_id={user_id}"
    await update.message.reply_text(
        f"üé∞ –û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∑–∏–Ω–æ:\n{miniapp_url}",
        reply_markup={
            "inline_keyboard": [[{
                "text": "–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                "web_app": {"url": miniapp_url}
            }]]
        }
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_bot():
    def bot_main():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        application = Application.builder().token(os.getenv("BOT_TOKEN")).build()
        application.add_handler(CommandHandler("miniapp", miniapp_command))
        loop.run_until_complete(application.initialize())
        loop.run_until_complete(application.start())
        loop.run_until_complete(application.run_polling())
    
    bot_thread = threading.Thread(target=bot_main, daemon=True)
    bot_thread.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
if not hasattr(st.session_state, 'bot_thread'):
    run_bot()

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    st.title("üé∞ –ö–∞–∑–∏–Ω–æ Telegram")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if not st.session_state.is_logged_in:
        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        col1, col2 = st.columns(2)
        
        with col1:
            st.header("–í—Ö–æ–¥")
            with st.form("login_form"):
                login_username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                login_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
                login_submitted = st.form_submit_button("–í–æ–π—Ç–∏")
                
                if login_submitted:
                    try:
                        user = asyncio.run(authenticate_user(login_username, login_password))
                        if user:
                            st.session_state.user_data = {
                                'id': user['user_id'],
                                'username': user['username'],
                                'first_name': user['first_name'],
                                'last_name': user['last_name']
                            }
                            st.session_state.is_logged_in = True
                            save_session_state()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                            st.success("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
                            st.rerun()
                        else:
                            st.error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
                    except Exception as e:
                        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {str(e)}")
        
        with col2:
            st.header("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
            with st.form("register_form"):
                reg_username = st.text_input("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                reg_password = st.text_input("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
                confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
                reg_first_name = st.text_input("–ò–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
                reg_last_name = st.text_input("–§–∞–º–∏–ª–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
                reg_submitted = st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
                
                if reg_submitted:
                    try:
                        if reg_password != confirm_password:
                            st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                        elif len(reg_username) < 3:
                            st.error("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
                        elif len(reg_password) < 6:
                            st.error("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
                        else:
                            success = asyncio.run(register_user(reg_username, reg_password, reg_first_name, reg_last_name))
                            if success:
                                st.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.")
                            else:
                                st.error("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ")
                    except Exception as e:
                        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞–∑–∏–Ω–æ
    else:
        user_id = st.session_state.user_data['id']
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        if st.button("–í—ã–π—Ç–∏"):
            st.session_state.is_logged_in = False
            st.session_state.user_data = None
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            try:
                os.remove('session.json')
            except FileNotFoundError:
                pass
            st.rerun()
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            balance = asyncio.run(get_user_balance(user_id))
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            col1, col2 = st.columns([1, 3])
            with col1:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ–¥–∑–∏ –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                st.markdown("""
                <div style="
                    width: 150px;
                    height: 150px;
                    background-color: #4CAF50;
                    border-radius: 50%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    font-size: 60px;
                    color: white;
                    margin: 0 auto;
                ">
                    üë§
                </div>
                """, unsafe_allow_html=True)
            with col2:
                st.header(f"üë§ {st.session_state.user_data['username']}")
                st.subheader(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç")
            
            # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
            tab1, tab2, tab3 = st.tabs(["üé≤ –†—É–ª–µ—Ç–∫–∞", "üìä –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", "üí∏ –ü–µ—Ä–µ–≤–æ–¥"])
            
            with tab1:
                st.header("üé≤ –ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É")
                bet = st.number_input("–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞", min_value=1, max_value=balance)
                numbers = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ 3 —á–∏—Å–ª–∞ (1-36)", range(1, 37), max_selections=3)
                
                if st.button("–ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É"):
                    if len(numbers) != 3:
                        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 3 —á–∏—Å–ª–∞!")
                    else:
                        # –ê–Ω–∏–º–∞—Ü–∏—è —Ä—É–ª–µ—Ç–∫–∏
                        placeholder = st.empty()
                        for i in range(10):
                            random_number = random.randint(1, 36)
                            placeholder.write(f"üé≤ –í—ã–ø–∞–ª–æ: {random_number}")
                            time.sleep(0.2)
                        
                        final_number = random.randint(1, 36)
                        placeholder.write(f"üé≤ –í—ã–ø–∞–ª–æ: {final_number}")
                        
                        if final_number in numbers:
                            winnings = bet * 36
                            st.success(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} –º–æ–Ω–µ—Ç!")
                            asyncio.run(update_balance(user_id, winnings))
                        else:
                            st.error("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!")
                            asyncio.run(update_balance(user_id, -bet))
            
            with tab2:
                st.header("üìä –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤")
                top_players = asyncio.run(get_top_players())
                for i, player in enumerate(top_players, 1):
                    st.write(f"{i}. {player['username']} - {player['balance']} –º–æ–Ω–µ—Ç")
            
            with tab3:
                st.header("üí∏ –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")
                recipient = st.text_input("–ù–∏–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
                amount = st.number_input("–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞", min_value=1, max_value=balance)
                
                if st.button("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏"):
                    try:
                        async def process_transfer():
                            async with aiosqlite.connect("casino.db") as db:
                                db.row_factory = sqlite3.Row
                                cursor = await db.execute("SELECT * FROM users WHERE username = ?", (recipient,))
                                recipient_data = await cursor.fetchone()
                                await cursor.close()
                                
                                if recipient_data:
                                    if await transfer_money(user_id, recipient_data['user_id'], amount):
                                        st.success(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient}")
                                    else:
                                        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤")
                                else:
                                    st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        
                        asyncio.run(process_transfer())
                    except Exception as e:
                        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}")
        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            st.session_state.is_logged_in = False
            st.session_state.user_data = None
            st.rerun()

# –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
st.markdown("""
<style>
    .stApp {
        background-color: #2E2E2E;
        color: #FFFFFF;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 16px;
    }
    .stNumberInput>div>div>input {
        background-color: #3E3E3E;
        color: #FFFFFF;
    }
    .stTextInput>div>div>input {
        background-color: #3E3E3E;
        color: #FFFFFF;
    }
    .stForm {
        background-color: #3E3E3E;
        padding: 20px;
        border-radius: 10px;
        color: #FFFFFF;
    }
    h1, h2, h3 {
        color: #4CAF50;
    }
    .stTextInput>div>div>label {
        color: #FFFFFF;
    }
    .stNumberInput>div>div>label {
        color: #FFFFFF;
    }
    .stMarkdown {
        color: #FFFFFF;
    }
    .stAlert {
        background-color: #3E3E3E;
        color: #FFFFFF;
    }
    .stSuccess {
        background-color: #2E7D32;
        color: #FFFFFF;
    }
    .stError {
        background-color: #C62828;
        color: #FFFFFF;
    }
    .stInfo {
        background-color: #1565C0;
        color: #FFFFFF;
    }
</style>
""", unsafe_allow_html=True) 

if __name__ == "__main__":
    main() 