import streamlit as st
import sqlite3
import random
import time
from PIL import Image
import requests
from io import BytesIO
import hashlib

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ö–∞–∑–∏–Ω–æ –ë–æ—Ç",
    page_icon="üé∞",
    layout="wide"
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('casino.db')
    conn.row_factory = sqlite3.Row
    return conn

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
def verify_password(password, hashed_password):
    return hash_password(password) == hashed_password

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def authenticate_user(username, password):
    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE username = ?', (username,)).fetchone()
    conn.close()
    if user and verify_password(password, user['password']):
        return user
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_data(user_id):
    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE user_id = ?', (user_id,)).fetchone()
    conn.close()
    return user

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –∏–≥—Ä–æ–∫–æ–≤
def get_top_players():
    conn = get_db_connection()
    top_players = conn.execute('SELECT * FROM users ORDER BY balance DESC LIMIT 10').fetchall()
    conn.close()
    return top_players

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
def transfer_money(from_user_id, to_user_id, amount):
    conn = get_db_connection()
    try:
        conn.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?', (amount, from_user_id))
        conn.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, to_user_id))
        conn.commit()
        return True
    except:
        conn.rollback()
        return False
    finally:
        conn.close()

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    st.title("üé∞ –ö–∞–∑–∏–Ω–æ –ë–æ—Ç")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if 'user_data' not in st.session_state:
        st.session_state.user_data = None
    if 'is_logged_in' not in st.session_state:
        st.session_state.is_logged_in = False
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
    if not st.session_state.is_logged_in:
        col1, col2 = st.columns(2)
        
        with col1:
            st.header("–í—Ö–æ–¥")
            with st.form("login_form"):
                username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
                submitted = st.form_submit_button("–í–æ–π—Ç–∏")
                
                if submitted:
                    user = authenticate_user(username, password)
                    if user:
                        st.session_state.user_data = {
                            'id': user['user_id'],
                            'username': user['username'],
                            'first_name': user['first_name'],
                            'last_name': user['last_name']
                        }
                        st.session_state.is_logged_in = True
                        st.success("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
                        st.rerun()
                    else:
                        st.error("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        
        with col2:
            st.header("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
            with st.form("register_form"):
                reg_username = st.text_input("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                reg_password = st.text_input("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
                confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
                reg_first_name = st.text_input("–ò–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
                reg_last_name = st.text_input("–§–∞–º–∏–ª–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
                reg_submitted = st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
                
                if reg_submitted:
                    if reg_password != confirm_password:
                        st.error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                    elif len(reg_username) < 3:
                        st.error("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
                    elif len(reg_password) < 6:
                        st.error("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
                    else:
                        conn = get_db_connection()
                        try:
                            hashed_password = hash_password(reg_password)
                            conn.execute("""
                                INSERT INTO users (username, password, first_name, last_name)
                                VALUES (?, ?, ?, ?)
                            """, (reg_username, hashed_password, reg_first_name, reg_last_name))
                            conn.commit()
                            st.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.")
                        except sqlite3.IntegrityError:
                            st.error("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ")
                        finally:
                            conn.close()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞–∑–∏–Ω–æ
    else:
        user_id = st.session_state.user_data['id']
        user_data = get_user_data(user_id)
        
        if user_data:
            # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
            col1, col2 = st.columns([1, 3])
            
            with col1:
                # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
                try:
                    response = requests.get(f"https://api.telegram.org/file/bot{st.secrets['BOT_TOKEN']}/getUserProfilePhotos?user_id={user_id}")
                    if response.status_code == 200:
                        photo_data = response.json()
                        if photo_data['result']['photos']:
                            photo = photo_data['result']['photos'][0][0]
                            photo_url = f"https://api.telegram.org/file/bot{st.secrets['BOT_TOKEN']}/getFile?file_id={photo['file_id']}"
                            photo_response = requests.get(photo_url)
                            if photo_response.status_code == 200:
                                file_path = photo_response.json()['result']['file_path']
                                image_url = f"https://api.telegram.org/file/bot{st.secrets['BOT_TOKEN']}/{file_path}"
                                image = Image.open(BytesIO(requests.get(image_url).content))
                                st.image(image, width=150)
                except:
                    st.image("default_avatar.png", width=150)
            
            with col2:
                st.header(f"üë§ {user_data['username']}")
                st.subheader(f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']} –º–æ–Ω–µ—Ç")
                
                # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
                if st.button("–í—ã–π—Ç–∏"):
                    st.session_state.is_logged_in = False
                    st.session_state.user_data = None
                    st.rerun()
            
            # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
            tab1, tab2, tab3 = st.tabs(["üé≤ –†—É–ª–µ—Ç–∫–∞", "üìä –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", "üí∏ –ü–µ—Ä–µ–≤–æ–¥"])
            
            with tab1:
                st.header("üé≤ –ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É")
                bet = st.number_input("–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞", min_value=1, max_value=user_data['balance'])
                numbers = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ 3 —á–∏—Å–ª–∞ (1-36)", range(1, 37), max_selections=3)
                
                if st.button("–ö—Ä—É—Ç–∏—Ç—å —Ä—É–ª–µ—Ç–∫—É"):
                    if len(numbers) != 3:
                        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 3 —á–∏—Å–ª–∞!")
                    else:
                        # –ê–Ω–∏–º–∞—Ü–∏—è —Ä—É–ª–µ—Ç–∫–∏
                        placeholder = st.empty()
                        for i in range(10):
                            random_number = random.randint(1, 36)
                            placeholder.write(f"üé≤ –í—ã–ø–∞–ª–æ: {random_number}")
                            time.sleep(0.2)
                        
                        final_number = random.randint(1, 36)
                        placeholder.write(f"üé≤ –í—ã–ø–∞–ª–æ: {final_number}")
                        
                        if final_number in numbers:
                            winnings = bet * 36
                            st.success(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} –º–æ–Ω–µ—Ç!")
                            conn = get_db_connection()
                            conn.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (winnings, user_id))
                            conn.commit()
                            conn.close()
                        else:
                            st.error("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!")
                            conn = get_db_connection()
                            conn.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?', (bet, user_id))
                            conn.commit()
                            conn.close()
            
            with tab2:
                st.header("üìä –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤")
                top_players = get_top_players()
                for i, player in enumerate(top_players, 1):
                    st.write(f"{i}. {player['username']} - {player['balance']} –º–æ–Ω–µ—Ç")
            
            with tab3:
                st.header("üí∏ –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")
                recipient = st.text_input("–ù–∏–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
                amount = st.number_input("–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞", min_value=1, max_value=user_data['balance'])
                
                if st.button("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏"):
                    conn = get_db_connection()
                    recipient_data = conn.execute('SELECT * FROM users WHERE username = ?', (recipient,)).fetchone()
                    if recipient_data:
                        if transfer_money(user_id, recipient_data['user_id'], amount):
                            st.success(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {recipient}")
                        else:
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤")
                    else:
                        st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    conn.close()
        else:
            st.error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            st.session_state.is_logged_in = False
            st.session_state.user_data = None
            st.rerun()

# –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
st.markdown("""
<style>
    .stApp {
        background-color: #1E1E1E;
        color: white;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 16px;
    }
    .stNumberInput>div>div>input {
        background-color: #2E2E2E;
        color: white;
    }
    .stTextInput>div>div>input {
        background-color: #2E2E2E;
        color: white;
    }
    .stForm {
        background-color: #2E2E2E;
        padding: 20px;
        border-radius: 10px;
    }
    h1, h2, h3 {
        color: #4CAF50;
    }
</style>
""", unsafe_allow_html=True)

if __name__ == "__main__":
    main() 